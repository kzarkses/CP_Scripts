-- @description MediaPropertiesToolbar - Settings
-- @version 1.0.1
-- @author Cedric Pamalio

local r = reaper

local script_name = "CP_MediaPropertiesToolbar_Settings"
local style_loader = nil
local style_loader_path = r.GetResourcePath() .. "/Scripts/CP_Scripts/Various/CP_ImGuiStyleLoader.lua"
if r.file_exists(style_loader_path) then 
    local loader_func = dofile(style_loader_path)
    if loader_func then 
        style_loader = loader_func() 
    end 
end

local ctx = r.ImGui_CreateContext('Media Properties Toolbar Settings')
local pushed_colors = 0
local pushed_vars = 0

if style_loader then 
    style_loader.ApplyFontsToContext(ctx) 
end

function GetStyleValue(path, default_value)
    if style_loader then
        return style_loader.GetValue(path, default_value)
    end
    return default_value
end

function GetFont(font_name)
    if style_loader then
        return style_loader.GetFont(ctx, font_name)
    end
    return nil
end

local header_font_size = GetStyleValue("fonts.header.size", 16)
local item_spacing_x = GetStyleValue("spacing.item_spacing_x", 6)
local item_spacing_y = GetStyleValue("spacing.item_spacing_y", 6)
local window_padding_x = GetStyleValue("spacing.window_padding_x", 6)
local window_padding_y = GetStyleValue("spacing.window_padding_y", 6)

local config = {
    font_name = "FiraSans-Regular",
    font_size = 14,
    entry_height = 20,
    name_width = 220,
    source_width = 220,
    time_unit = "time",
    text_color_r = 0.70,
    text_color_g = 0.70,
    text_color_b = 0.70,
    text_color_a = 1.0,
    background_color_r = 0.155,
    background_color_g = 0.155,
    background_color_b = 0.155,
    background_color_a = 1.0,
    frame_color_r = 0.155,
    frame_color_g = 0.155,
    frame_color_b = 0.155,
    frame_color_a = 1.0,
    frame_color_active_r = 0.21,
    frame_color_active_g = 0.7,
    frame_color_active_b = 0.63,
    frame_color_active_a = 0.4,
    text_normal_r = 0.75,
    text_normal_g = 0.75,
    text_normal_b = 0.75,
    text_normal_a = 1.0,
    text_modified_r = 0.0,
    text_modified_g = 0.8,
    text_modified_b = 0.6,
    text_modified_a = 1.0,
    text_negative_r = 0.8,
    text_negative_g = 0.4,
    text_negative_b = 0.6,
    text_negative_a = 1.0
}

local state = {
    is_open = true,
    window_position_set = false,
    debug_info = "",
    settings_path = r.GetResourcePath() .. "/Scripts/CP_Scripts/Media Properties Toolbar/MediaPropertiesToolbar_settings.ini"
}

function ApplyStyle()
    if style_loader then
        local success, colors, vars = style_loader.ApplyToContext(ctx)
        if success then 
            pushed_colors = colors
            pushed_vars = vars
            return true
        end
    end
    return false
end

function ClearStyle()
    if style_loader then 
        style_loader.ClearStyles(ctx, pushed_colors, pushed_vars)
    end
end

function SaveSettings()
    for key, value in pairs(config) do
        local value_str = tostring(value)
        if type(value) == "boolean" then
            value_str = value and "1" or "0"
        end
        r.SetExtState(script_name, "config_" .. key, value_str, true)
    end
    SaveToIniFile()
end

function LoadSettings()
    for key, default_value in pairs(config) do
        local saved_value = r.GetExtState(script_name, "config_" .. key)
        if saved_value ~= "" then
            if type(default_value) == "number" then
                config[key] = tonumber(saved_value) or default_value
            elseif type(default_value) == "boolean" then
                config[key] = saved_value == "1"
            else
                config[key] = saved_value
            end
        end
    end
    LoadFromIniFile()
end

function SaveToIniFile()
    local file = io.open(state.settings_path, "w")
    
    if not file then
        r.ShowMessageBox("Unable to save settings to file: " .. state.settings_path, "Error", 0)
        return
    end
    
    file:write("; Media Properties Toolbar Settings\n")
    file:write("; Generated by CP_MediaPropertiesToolbar_Settings.lua\n\n")
    
    file:write("[font]\n")
    file:write("name = " .. config.font_name .. "\n")
    file:write("size = " .. config.font_size .. "\n\n")
    
    file:write("[layout]\n")
    file:write("entry_height = " .. config.entry_height .. "\n")
    file:write("name_width = " .. config.name_width .. "\n")
    file:write("source_width = " .. config.source_width .. "\n")
    file:write("time_unit = " .. config.time_unit .. "\n")
    file:write("text_color = {" .. config.text_color_r .. "," .. config.text_color_g .. "," .. config.text_color_b .. "," .. config.text_color_a .. "}\n")
    file:write("background_color = {" .. config.background_color_r .. "," .. config.background_color_g .. "," .. config.background_color_b .. "," .. config.background_color_a .. "}\n")
    file:write("frame_color = {" .. config.frame_color_r .. "," .. config.frame_color_g .. "," .. config.frame_color_b .. "," .. config.frame_color_a .. "}\n")
    file:write("frame_color_active = {" .. config.frame_color_active_r .. "," .. config.frame_color_active_g .. "," .. config.frame_color_active_b .. "," .. config.frame_color_active_a .. "}\n\n")
    
    file:write("[colors]\n")
    file:write("text_normal = {" .. config.text_normal_r .. "," .. config.text_normal_g .. "," .. config.text_normal_b .. "," .. config.text_normal_a .. "}\n")
    file:write("text_modified = {" .. config.text_modified_r .. "," .. config.text_modified_g .. "," .. config.text_modified_b .. "," .. config.text_modified_a .. "}\n")
    file:write("text_negative = {" .. config.text_negative_r .. "," .. config.text_negative_g .. "," .. config.text_negative_b .. "," .. config.text_negative_a .. "}\n")
    
    file:close()
    r.SetExtState("MediaPropertiesToolbar", "settings_changed", tostring(r.time_precise()), false)
end

function LoadFromIniFile()
    local file = io.open(state.settings_path, "r")
    if not file then
        return
    end
    
    local section = nil
    for line in file:lines() do
        if line:match("^%s*$") or line:match("^%s*;") then
        elseif line:match("^%[(.+)%]$") then
            section = line:match("^%[(.+)%]$")
        elseif line:match("^%s*(.-)%s*=%s*(.-)%s*$") then
            local key, value = line:match("^%s*(.-)%s*=%s*(.-)%s*$")
            
            if section and section == "colors" then
                if value:match("^{.+}$") then
                    local values = {}
                    for v in value:sub(2, -2):gmatch("[^,]+") do
                        table.insert(values, tonumber(v) or 0)
                    end
                    if #values == 4 then
                        if key == "text_normal" then
                            config.text_normal_r, config.text_normal_g, config.text_normal_b, config.text_normal_a = values[1], values[2], values[3], values[4]
                        elseif key == "text_modified" then
                            config.text_modified_r, config.text_modified_g, config.text_modified_b, config.text_modified_a = values[1], values[2], values[3], values[4]
                        elseif key == "text_negative" then
                            config.text_negative_r, config.text_negative_g, config.text_negative_b, config.text_negative_a = values[1], values[2], values[3], values[4]
                        end
                    end
                end
            elseif section and section == "font" then
                if key == "name" then
                    config.font_name = value
                elseif key == "size" then
                    config.font_size = tonumber(value) or config.font_size
                end
            elseif section and section == "layout" then
                if key == "entry_height" then
                    config.entry_height = tonumber(value) or config.entry_height
                elseif key == "name_width" then
                    config.name_width = tonumber(value) or config.name_width
                elseif key == "source_width" then
                    config.source_width = tonumber(value) or config.source_width
                elseif key == "time_unit" then
                    if value == "beats" or value == "time" then
                        config.time_unit = value
                    end
                elseif value:match("^{.+}$") then
                    local values = {}
                    for v in value:sub(2, -2):gmatch("[^,]+") do
                        table.insert(values, tonumber(v) or 0)
                    end
                    if #values == 4 then
                        if key == "text_color" then
                            config.text_color_r, config.text_color_g, config.text_color_b, config.text_color_a = values[1], values[2], values[3], values[4]
                        elseif key == "background_color" then
                            config.background_color_r, config.background_color_g, config.background_color_b, config.background_color_a = values[1], values[2], values[3], values[4]
                        elseif key == "frame_color" then
                            config.frame_color_r, config.frame_color_g, config.frame_color_b, config.frame_color_a = values[1], values[2], values[3], values[4]
                        elseif key == "frame_color_active" then
                            config.frame_color_active_r, config.frame_color_active_g, config.frame_color_active_b, config.frame_color_active_a = values[1], values[2], values[3], values[4]
                        end
                    end
                end
            else
                if key == "font_name" then
                    config.font_name = value
                elseif key == "font_size" then
                    config.font_size = tonumber(value) or config.font_size
                elseif key == "entry_height" then
                    config.entry_height = tonumber(value) or config.entry_height
                elseif key == "name_width" then
                    config.name_width = tonumber(value) or config.name_width
                elseif key == "source_width" then
                    config.source_width = tonumber(value) or config.source_width
                elseif key == "time_unit" then
                    if value == "beats" or value == "time" then
                        config.time_unit = value
                    end
                elseif value:match("^{.+}$") then
                    local values = {}
                    for v in value:sub(2, -2):gmatch("[^,]+") do
                        table.insert(values, tonumber(v) or 0)
                    end
                    if #values == 4 then
                        if key == "text_color" then
                            config.text_color_r, config.text_color_g, config.text_color_b, config.text_color_a = values[1], values[2], values[3], values[4]
                        elseif key == "background_color" then
                            config.background_color_r, config.background_color_g, config.background_color_b, config.background_color_a = values[1], values[2], values[3], values[4]
                        elseif key == "frame_color" then
                            config.frame_color_r, config.frame_color_g, config.frame_color_b, config.frame_color_a = values[1], values[2], values[3], values[4]
                        elseif key == "frame_color_active" then
                            config.frame_color_active_r, config.frame_color_active_g, config.frame_color_active_b, config.frame_color_active_a = values[1], values[2], values[3], values[4]
                        end
                    end
                end
            end
        end
    end
    
    file:close()
end

function ArrayToImGuiColor(r, g, b)
    local r_int = math.floor(r * 255)
    local g_int = math.floor(g * 255)
    local b_int = math.floor(b * 255)
    return (r_int << 16) | (g_int << 8) | b_int
end

function ImGuiColorToArray(color)
    local r = ((color >> 16) & 0xFF) / 255
    local g = ((color >> 8) & 0xFF) / 255
    local b = (color & 0xFF) / 255
    return r, g, b
end

function EditColor(label, r_key, g_key, b_key, a_key)
    local color_value = ArrayToImGuiColor(config[r_key], config[g_key], config[b_key])
    local rv, new_color = r.ImGui_ColorEdit3(ctx, label, color_value)
    
    if rv then
        config[r_key], config[g_key], config[b_key] = ImGuiColorToArray(new_color)
        return true
    end
    
    return false
end

function ResetToDefaults()
    config.font_name = "FiraSans-Regular"
    config.font_size = 14
    config.entry_height = 20
    config.name_width = 220
    config.source_width = 220
    config.time_unit = "time"
    config.text_color_r = 0.70
    config.text_color_g = 0.70
    config.text_color_b = 0.70
    config.text_color_a = 1.0
    config.background_color_r = 0.155
    config.background_color_g = 0.155
    config.background_color_b = 0.155
    config.background_color_a = 1.0
    config.frame_color_r = 0.155
    config.frame_color_g = 0.155
    config.frame_color_b = 0.155
    config.frame_color_a = 1.0
    config.frame_color_active_r = 0.21
    config.frame_color_active_g = 0.7
    config.frame_color_active_b = 0.63
    config.frame_color_active_a = 0.4
    config.text_normal_r = 0.75
    config.text_normal_g = 0.75
    config.text_normal_b = 0.75
    config.text_normal_a = 1.0
    config.text_modified_r = 0.0
    config.text_modified_g = 0.8
    config.text_modified_b = 0.6
    config.text_modified_a = 1.0
    config.text_negative_r = 0.8
    config.text_negative_g = 0.4
    config.text_negative_b = 0.6
    config.text_negative_a = 1.0
end

function MainLoop()
    ApplyStyle()
    
    local window_flags = r.ImGui_WindowFlags_NoTitleBar() | r.ImGui_WindowFlags_NoCollapse()
    local visible, open = r.ImGui_Begin(ctx, 'Media Properties Toolbar Settings', true, window_flags)
    if visible then
        if style_loader and style_loader.PushFont(ctx, "header") then
            r.ImGui_Text(ctx, "Media Properties Toolbar Settings")
            style_loader.PopFont(ctx)
        else
            r.ImGui_Text(ctx, "Media Properties Toolbar Settings")
        end

        r.ImGui_SameLine(ctx)
        
        local close_button_size = header_font_size + 6
        local save_button_width = 60
        local buttons_width = save_button_width + close_button_size + item_spacing_x
        local save_x = r.ImGui_GetWindowWidth(ctx) - buttons_width - window_padding_x

        r.ImGui_SetCursorPosX(ctx, save_x)
        if r.ImGui_Button(ctx, "Save", save_button_width, close_button_size) then
            SaveSettings()
            state.debug_info = "Settings saved"
        end

        r.ImGui_SameLine(ctx)
        if r.ImGui_Button(ctx, "X", close_button_size, close_button_size) then
            open = false
        end

        if style_loader and style_loader.PushFont(ctx, "main") then
            r.ImGui_Separator(ctx)
        
        r.ImGui_TextWrapped(ctx, "Main Colors")
        
        local changed = false
        changed = EditColor("Background Color", "background_color_r", "background_color_g", "background_color_b", "background_color_a") or changed
        changed = EditColor("Frame Color", "frame_color_r", "frame_color_g", "frame_color_b", "frame_color_a") or changed
        changed = EditColor("Text Color", "text_color_r", "text_color_g", "text_color_b", "text_color_a") or changed
        
        if changed then
            SaveSettings()
        end
        
        r.ImGui_Separator(ctx)
        
        r.ImGui_TextWrapped(ctx, "Value Colors")
        
        local color_changed = false
        color_changed = EditColor("Normal Values", "text_normal_r", "text_normal_g", "text_normal_b", "text_normal_a") or color_changed
        color_changed = EditColor("Modified Values", "text_modified_r", "text_modified_g", "text_modified_b", "text_modified_a") or color_changed
        color_changed = EditColor("Negative Values", "text_negative_r", "text_negative_g", "text_negative_b", "text_negative_a") or color_changed
        
        if color_changed then
            SaveSettings()
            r.SetExtState("MediaPropertiesToolbar", "settings_changed", tostring(r.time_precise()), false)
        end
        
        r.ImGui_Separator(ctx)

        r.ImGui_TextWrapped(ctx, "Font and Layout (requires restart)")
        
        local layout_changed = false
        
        local combo_width = GetStyleValue("controls.combo_width", 200)
        r.ImGui_SetNextItemWidth(ctx, combo_width)
        if r.ImGui_BeginCombo(ctx, "Font Name", config.font_name) then
            local fonts = {
                "Arial", "Verdana", "Tahoma", "Segoe UI", 
                "FiraSans-Regular", "Consolas", "Courier New",
                "Roboto", "sans-serif", "serif", "monospace"
            }
            
            for _, font_name in ipairs(fonts) do
                local is_selected = (config.font_name == font_name)
                if r.ImGui_Selectable(ctx, font_name, is_selected) then
                    config.font_name = font_name
                    layout_changed = true
                end
                
                if is_selected then
                    r.ImGui_SetItemDefaultFocus(ctx)
                end
            end
            
            r.ImGui_EndCombo(ctx)
        end
        local content_width = r.ImGui_GetContentRegionAvail(ctx)
        local slider_width = content_width - 100
        r.ImGui_SetNextItemWidth(ctx, slider_width)
        local rv, new_size = r.ImGui_SliderInt(ctx, "Font Size", config.font_size, 8, 24)
        if rv then
            config.font_size = new_size
            layout_changed = true
        end
        
        r.ImGui_SetNextItemWidth(ctx, slider_width)
        local rv, new_height = r.ImGui_SliderInt(ctx, "Row Height", config.entry_height, 16, 40)
        if rv then
            config.entry_height = new_height
            layout_changed = true
        end
        
        r.ImGui_SetNextItemWidth(ctx, slider_width)
        local rv, new_width = r.ImGui_SliderInt(ctx, "Name Width", config.name_width, 120, 400)
        if rv then
            config.name_width = new_width
            layout_changed = true
        end
        
        r.ImGui_SetNextItemWidth(ctx, slider_width)
        local rv, new_width = r.ImGui_SliderInt(ctx, "Source Width", config.source_width, 120, 400)
        if rv then
            config.source_width = new_width
            layout_changed = true
        end
        
        r.ImGui_SetNextItemWidth(ctx, combo_width)
        if r.ImGui_BeginCombo(ctx, "Time Display", config.time_unit == "beats" and "Beats (Bars.Beats.Ticks)" or "Time (Min:Sec.Ms)") then
            local time_options = {
                {value = "time", label = "Time (Min:Sec.Ms)"},
                {value = "beats", label = "Beats (Bars.Beats.Ticks)"}
            }
            
            for _, option in ipairs(time_options) do
                local is_selected = (config.time_unit == option.value)
                if r.ImGui_Selectable(ctx, option.label, is_selected) then
                    config.time_unit = option.value
                    layout_changed = true
                end
                
                if is_selected then
                    r.ImGui_SetItemDefaultFocus(ctx)
                end
            end
            
            r.ImGui_EndCombo(ctx)
        end
        
        if layout_changed then
            SaveSettings()
            r.SetExtState("MediaPropertiesToolbar", "layout_changed", "1", false)
        end
        
        

        r.ImGui_Separator(ctx)
        
        local item_spacing_x = GetStyleValue("item_spacing_x", 6)
        local button_width = (content_width - item_spacing_x) / 2

        if r.ImGui_Button(ctx, "Reset to Defaults", button_width) then
            ResetToDefaults()
            SaveSettings()
            r.SetExtState("MediaPropertiesToolbar", "settings_changed", tostring(r.time_precise()), false)
            r.ShowMessageBox("Settings reset to defaults. Value colors will update immediately, other changes require restarting the toolbar.", "Settings Reset", 0)
        end
        
        r.ImGui_SameLine(ctx)
        
        if r.ImGui_Button(ctx, "Apply All & Restart Toolbar", button_width) then
            SaveSettings()
            r.SetExtState("MediaPropertiesToolbar", "layout_changed", "1", false)
            r.ShowMessageBox("Settings applied! The toolbar will attempt to restart itself.", "Settings Applied", 0)
        end
        
        -- if state.debug_info ~= "" then
        --     r.ImGui_Dummy(ctx, 0, item_spacing_y)
        --     r.ImGui_Text(ctx, state.debug_info)
        -- end
        
        style_loader.PopFont(ctx)
        end
        
        r.ImGui_End(ctx)
    end
    
    ClearStyle()
    
    r.PreventUIRefresh(-1)
    
    if open then
        r.defer(MainLoop)
    else
        SaveSettings()
    end
end

function ToggleScript()
    local _, _, section_id, command_id = r.get_action_context()
    local script_state = r.GetToggleCommandState(command_id)
    
    if script_state == -1 or script_state == 0 then
        r.SetToggleCommandState(section_id, command_id, 1)
        r.RefreshToolbar2(section_id, command_id)
        Start()
    else
        r.SetToggleCommandState(section_id, command_id, 0)
        r.RefreshToolbar2(section_id, command_id)
        Stop()
    end
end

function Start()
    LoadSettings()
    MainLoop()
end

function Stop()
    SaveSettings()
    Cleanup()
end

function Cleanup()
    local _, _, section_id, command_id = r.get_action_context()
    r.SetToggleCommandState(section_id, command_id, 0)
    r.RefreshToolbar2(section_id, command_id)
end

function Exit()
    SaveSettings()
    Cleanup()
end

r.atexit(Exit)
ToggleScript()
